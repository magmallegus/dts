package it.dl.engine.app

import org.apache.commons.dbcp.BasicDataSource
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.core.env.Environment
import org.springframework.data.jpa.repository.config.EnableJpaRepositories
import org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver
import org.springframework.orm.hibernate4.HibernateExceptionTranslator
import org.springframework.orm.jpa.JpaTransactionManager
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter
import org.springframework.transaction.PlatformTransactionManager
import org.springframework.transaction.annotation.EnableTransactionManagement

import javax.persistence.EntityManagerFactory
import javax.sql.DataSource

/**
 * Created by fallicr on 02/12/2015.
 */
@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(basePackages="it.dl.engine.app")
public class PersistenceConfig
{
  @Autowired
  private Environment env

  @Bean
  public PlatformTransactionManager transactionManager()
  {
    EntityManagerFactory factory = entityManagerFactory().getObject()
    return new JpaTransactionManager(factory)
  }

  @Bean
  public LocalContainerEntityManagerFactoryBean entityManagerFactory()
  {
    LocalContainerEntityManagerFactoryBean factory = new LocalContainerEntityManagerFactoryBean()

    HibernateJpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter()
    vendorAdapter.setGenerateDdl(Boolean.TRUE)
    vendorAdapter.setShowSql(Boolean.TRUE)

    factory.setDataSource(dataSource())
    factory.setJpaVendorAdapter(vendorAdapter)
    factory.setPackagesToScan("it.dl.engine.app")
    factory.persistenceXmlLocation = "classpath:META-INF/persistence.xml"
    factory.persistenceUnitName = "tracking"

    Properties jpaProperties = new Properties()
    jpaProperties.put("hibernate.show_sql", env.getProperty("hibernate.show_sql"))
    jpaProperties.put("hibernate.validator.apply_to_ddl", env.getProperty("hibernate.validator.apply_to_ddl"))
    jpaProperties.put("hibernate.validator.autoregister_listeners", env.getProperty("hibernate.validator.autoregister_listeners"))
    jpaProperties.put("hibernate.transaction.manager_lookup_class", "org.hibernate.transaction.JBossTransactionManagerLookup")
    factory.setJpaProperties(jpaProperties)

    factory.afterPropertiesSet()
    factory.setLoadTimeWeaver(new InstrumentationLoadTimeWeaver())
    return factory
  }

  @Bean
  public HibernateExceptionTranslator hibernateExceptionTranslator()
  {
    return new HibernateExceptionTranslator()
  }

  @Bean
  public DataSource dataSource()
  {
    BasicDataSource dataSource = new BasicDataSource()
    dataSource.setDriverClassName(env.getProperty("jdbc.driverClassName"))
    dataSource.setUrl(env.getProperty("jdbc.url"))
    dataSource.setUsername(env.getProperty("jdbc.username"))
    dataSource.setPassword(env.getProperty("jdbc.password"))
    return dataSource
  }
}
